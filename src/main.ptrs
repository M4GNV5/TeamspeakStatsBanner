import sleep, popen, fgets, pclose, strchr, printf;
import CpuData from "./cpu.ptrs";
import MemData from "./mem.ptrs";

import cairo_image_surface_create, cairo_create, cairo_surface_write_to_png,
	cairo_surface_destroy, cairo_destroy,
	cairo_set_line_width, cairo_set_source_rgb, cairo_move_to,
	cairo_line_to, cairo_rel_line_to, cairo_get_current_point,
	cairo_select_font_face, cairo_set_font_size, cairo_show_text,
	cairo_image_surface_create_from_png, cairo_mask_surface,
	cairo_stroke, cairo_fill from "libcairo.so.2";

const IMAGE_WIDTH = 930;
const IMAGE_HEIGHT = 240;
const DATA_COUNT = 10;

var cr;
var surface;
var plotData[DATA_COUNT];
var uptime{1024};

var cpuColor = new array[] [0, 0, 0.9];
var memColor = new array[] [0, 0.9, 0];
var cacheColor = new array[] [0.9, 0.9, 0];

var cpuData[DATA_COUNT];
for(var i = 0; i < DATA_COUNT; i++)
	cpuData[i] = new CpuData();

var memData[DATA_COUNT];
for(var i = 0; i < DATA_COUNT; i++)
	memData[i] = new MemData();

function plot(title, color, startX, startY)
{
	startX = cast<float>startX;
	startY = cast<float>startY;

	cairo_set_source_rgb(cr, cast<float>color[0], cast<float>color[1], cast<float>color[2]);

	for(var i = 1; i < DATA_COUNT; i++)
	{
		cairo_line_to(cr, startX + i * 100f / DATA_COUNT, startY + (100f - plotData[i]));
	}
	cairo_stroke(cr);

	cairo_set_source_rgb(cr, 0f, 0f, 0f);

	cairo_move_to(cr, startX + 5, startY + 15);
	cairo_show_text(cr, title);

	cairo_move_to(cr, startX, startY);
	cairo_rel_line_to(cr, 0f, 100f);
	cairo_rel_line_to(cr, 100f, 0f);
	cairo_stroke(cr);
}

var i = 0;
while(true)
{
	cpuData[i].updateData();
	memData[i].updateData();

	if(++i >= DATA_COUNT)
	{
		surface = cairo_image_surface_create(0, IMAGE_WIDTH, IMAGE_HEIGHT);
		cr = cairo_create(surface);
		cairo_select_font_face(cr, "sans-serif", 0, 1);
		cairo_set_font_size(cr, 15.0);
		cairo_set_line_width(cr, 3.0);



		for(var i = 1; i < DATA_COUNT; i++)
			plotData[i] = cpuData[i].getUsageSince(cpuData[i - 1]) * 100;
		scoped plot("CPU", cpuColor, 5, 5);

		for(var i = 1; i < DATA_COUNT; i++)
			plotData[i] = 100 - memData[i].available * 100f / memData[i].total;
		scoped plot("MEM", memColor, 5, 130);

		for(var i = 1; i < DATA_COUNT; i++)
			plotData[i] = 100 - memData[i].free * 100f / memData[i].total;
		scoped plot("", cacheColor, 5, 130);



		var proc = popen("uptime", "r");
		fgets(uptime, 1024, proc);
		pclose(proc);
		*strchr!native(uptime, '\n') = 0;
		cairo_select_font_face(cr, "sans-serif", 0, 1);
		cairo_move_to(cr, 130.0, IMAGE_HEIGHT - 15.0);
		cairo_show_text(cr, uptime);



		cairo_surface_write_to_png(surface, "banner.png");
		cairo_destroy(cr);
		cairo_surface_destroy(surface);
		i = 0;
	}

	sleep(1);
}
