import sleep, popen, fgets, pclose, strchr, printf;
import cairo_* from "libcairo.so.2";
import g_object_unref, pango_* from "libpangocairo-1.0.so.0";
import CpuData from "./cpu.ptrs";
import MemData from "./mem.ptrs";
import ZeitNews from "./zeit.ptrs";

const IMAGE_WIDTH = 930;
const IMAGE_HEIGHT = 240;
const DATA_COUNT = 60;
const NEWS_REFRESH = 5;
const FONT_GRAPH = "sans-serif";
const FONT_UPTIME = "sans-serif";
const FONT_NEWS_TITLE = "sans-serif bold 12";
const FONT_NEWS = "sans-serif 12";

var cr;
var surface;
var plotData[DATA_COUNT];
var uptime{1024};

var cpuColor = new array[] [0, 0, 0.9];
var memColor = new array[] [0, 0.9, 0];
var cacheColor = new array[] [0.9, 0.9, 0];

var cpuData[DATA_COUNT];
for(var i = 0; i < DATA_COUNT; i++)
	cpuData[i] = new CpuData();

var memData[DATA_COUNT];
for(var i = 0; i < DATA_COUNT; i++)
	memData[i] = new MemData();

var titleFont = pango_font_description_from_string(FONT_NEWS_TITLE);
var textFont = pango_font_description_from_string(FONT_NEWS);
var news = new ZeitNews();
news.updateData();

function plot(title, color, startX, startY)
{
	startX = cast<float>startX;
	startY = cast<float>startY;

	cairo_set_source_rgb(cr, cast<float>color[0], cast<float>color[1], cast<float>color[2]);

	for(var i = 1; i < DATA_COUNT; i++)
	{
		cairo_line_to(cr, startX + i * 100f / DATA_COUNT, startY + (100f - plotData[i]));
	}
	cairo_stroke(cr);

	cairo_set_source_rgb(cr, 0f, 0f, 0f);

	cairo_move_to(cr, startX + 5, startY + 15);
	cairo_show_text(cr, title);

	cairo_move_to(cr, startX, startY);
	cairo_rel_line_to(cr, 0f, 100f);
	cairo_rel_line_to(cr, 100f, 0f);
	cairo_stroke(cr);
}

var i = 0;
var j = 0;
while(true)
{
	cpuData[i].updateData();
	memData[i].updateData();

	if(++i >= DATA_COUNT)
	{
		surface = cairo_image_surface_create(0, IMAGE_WIDTH, IMAGE_HEIGHT);
		cr = cairo_create(surface);
		cairo_select_font_face(cr, FONT_GRAPH, 0, 1);
		cairo_set_font_size(cr, 15f);
		cairo_set_line_width(cr, 3f);



		for(var i = 1; i < DATA_COUNT; i++)
			plotData[i] = cpuData[i].getUsageSince(cpuData[i - 1]) * 100;
		plot("CPU", cpuColor, 5, 5);

		for(var i = 1; i < DATA_COUNT; i++)
			plotData[i] = 100 - memData[i].available * 100f / memData[i].total;
		plot("MEM", memColor, 5, 130);

		for(var i = 1; i < DATA_COUNT; i++)
			plotData[i] = 100 - memData[i].free * 100f / memData[i].total;
		plot("", cacheColor, 5, 130);



		scoped
		{
			cairo_move_to(cr, 130f, 5f);
			var newsY = 0f;

			for(var i = 0; i < 6; i++)
			{
				var layout = pango_cairo_create_layout(cr);
				pango_layout_set_width(layout, pango_units_from_double(IMAGE_WIDTH - 140f));

				if(i % 2 == 0)
				{
					newsY += 5;
					pango_layout_set_font_description(layout, titleFont);
					pango_layout_set_text(layout, news[i / 2].title, -1);
				}
				else
				{
					pango_layout_set_font_description(layout, textFont);
					pango_layout_set_text(layout, news[i / 2].subtitle, -1);
				}

				cairo_move_to(cr, 130f, newsY);
				pango_cairo_show_layout(cr, layout);

				var height = 0;
				pango_layout_get_pixel_size(layout, NULL, &height);
				newsY += height;

				g_object_unref(layout);
			}
		}



		var proc = popen("uptime", "r");
		fgets(uptime, 1024, proc);
		pclose(proc);
		*strchr!native(uptime, '\n') = 0;
		cairo_select_font_face(cr, FONT_UPTIME, 0, 1);
		cairo_move_to(cr, 130f, IMAGE_HEIGHT - 15f);
		cairo_show_text(cr, uptime);



		cairo_surface_write_to_png(surface, "banner.png");
		cairo_destroy(cr);
		cairo_surface_destroy(surface);

		i = 0;

		j++;
		if(j >= NEWS_REFRESH)
		{
			news.updateData();
			j = 0;
		}
	}

	sleep(1);
}
