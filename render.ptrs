import "printf", "malloc", "free", "strchr", "strlen", "fopen", "fscanf", "fgets", "fclose", "isalnum";

import "cairo_image_surface_create", "cairo_create", "cairo_surface_write_to_png",
	"cairo_set_line_width", "cairo_set_source_rgb", "cairo_move_to",
	"cairo_line_to", "cairo_rel_line_to", "cairo_get_current_point",
	"cairo_select_font_face", "cairo_set_font_size", "cairo_show_text",
	"cairo_stroke", "cairo_fill" from "libcairo.so.2";

var imageWidth = 930;
var imageHeight = 240;

var memData[VARSIZE * 60];
var cacheData[VARSIZE * 60];
var cpuData[VARSIZE * 60];

function readDataFile(buff, file)
{
	var fd = fopen(file, "r");
	for(var i = 0; i < 60; i++)
	{
		var val = 0.0;
		if(fscanf(fd, "%lf", &val) != 1)
			return i;

		buff[i] = val;
	}
	fclose(fd);
}
var memDataCount = readDataFile(memData, "data/mem.dat");
var cacheDataCount = readDataFile(cacheData, "data/cache.dat");
var cpuDataCount = readDataFile(cpuData, "data/cpu.dat");



var newsTitle[VARSIZE * 3];
var newsSubtitle[VARSIZE * 3];
var fd = fopen("data/news.dat", "r");
for(var i = 0; i < 3; i++)
{
	var ptr;

	newsTitle[i] = malloc(256);
	fgets(newsTitle[i], 256, fd);
	ptr = (native)strchr(newsTitle[i], '\n');
	*ptr = 0;

	newsSubtitle[i] = malloc(1024);
	fgets(newsSubtitle[i], 1024, fd);
	ptr = (native)strchr(newsSubtitle[i], '\n');
	*ptr = 0;
}
fclose(fd);



var uptime = malloc(256);
fd = fopen("data/uptime.dat", "r");
fgets(uptime, 256, fd);
var ptr = (native)strchr(uptime, '\n');
*ptr = 0;
fclose(fd);



var surface = cairo_image_surface_create(0, imageWidth, imageHeight);
var cr = cairo_create(surface);
cairo_select_font_face(cr, "sans-serif", 0, 1);
cairo_set_font_size(cr, 15.0);
cairo_set_line_width(cr, 3.0);



function plotData(title, data, dataCount, color, startX, startY)
{
	startX = (float)startX;
	startY = (float)startY;

	cairo_set_source_rgb(cr, (float)color[0], (float)color[1], (float)color[2]);
	cairo_move_to(cr, startX, startY + (100 - data[0]));

	for(var i = 1; i < dataCount; i++)
	{
		cairo_line_to(cr, startX + i * 100.0 / dataCount, startY + (100 - data[i]));
	}
	cairo_stroke(cr);

	cairo_set_source_rgb(cr, 0.0, 0.0, 0.0);

	cairo_move_to(cr, startX + 5, startY + 15);
	cairo_show_text(cr, title);

	cairo_move_to(cr, startX, startY);
	cairo_rel_line_to(cr, 0.0, 100.0);
	cairo_rel_line_to(cr, 100.0, 0.0);
	cairo_stroke(cr);
}

plotData("CPU", cpuData, memDataCount, [0, 0, 1], 5, 5);
plotData("Memory", memData, cpuDataCount, [0, 0.9, 0], 5, 130);
plotData("", cacheData, cacheDataCount, [0.9, 0.9, 0], 5, 130);



function printStr(startX, endX, str)
{
	var buff[2];
	buff[1] = 0;
	str = (native)str;

	var x = 0.0;
	var y = 0.0;
	var len = strlen(str);
	for(var i = 0; i < len; i++)
	{
		if(str[i] < 0)
			str[i] = '\n';
		if(str[i] == '\n' && str[i - 1] == '\n')
			continue;

		buff[0] = str[i];
		cairo_show_text(cr, buff);
		cairo_get_current_point(cr, &x, &y);

		if(str[i] == ' ' && x >= endX)
		{
			cairo_move_to(cr, startX, y + 12);
		}
	}

	cairo_get_current_point(cr, &x, &y);
	return y;
}

var nextY = 17.0;
for(var i = 0; i < 3; i++)
{
	cairo_select_font_face(cr, "sans-serif", 0, 1);
	cairo_move_to(cr, 130.0, nextY);
	nextY = 15 + printStr(130.0, 850, newsTitle[i]);

	cairo_select_font_face(cr, "sans-serif", 0, 0);
	cairo_move_to(cr, 130.0, nextY);
	nextY = 30 + printStr(130.0, 850, newsSubtitle[i]);
}

cairo_select_font_face(cr, "sans-serif", 0, 1);
cairo_move_to(cr, 130.0, imageHeight - 15.0);
cairo_show_text(cr, uptime);

cairo_surface_write_to_png(surface, "banner.png");
